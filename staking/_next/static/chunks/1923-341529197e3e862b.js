"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1923],{32194:function(e,t,s){s.d(t,{q:function(){return n.q}});var n=s(13205)},47978:function(e,t,s){s.d(t,{D:function(){return n.D}});var n=s(17823)},71168:function(e,t,s){s.d(t,{sQ:function(){return n.s}});s(75104),s(70030),s(78178);var n=s(15336)},8289:function(e,t,s){s.d(t,{DMT:function(){return n.DMT},KHm:function(){return n.KHm},Q0d:function(){return n.Q0d},RJ0:function(){return n.RJ0},_1N:function(){return n._1N},eGR:function(){return n.eGR},jMx:function(){return n.jMx},pLm:function(){return n.pLm},ueV:function(){return n.ueV},v4o:function(){return n.v4o},yXc:function(){return n.yXc},yue:function(){return n.yue}});var n=s(28084)},75345:function(e,t,s){s.d(t,{cz:function(){return p},Ig:function(){return i},Tg:function(){return o}});var n=s(70030),a=s(93889);s(15955),s(47366);let r;function i(){if(!r)throw new Error('Please call "createAppKit" before using "useAppKit" hook');return{open:async function(e){await(r?.open(e))},close:async function(){await(r?.close())}}}function o(){if(!r)throw new Error('Please call "createAppKit" before using "useAppKitState" hook');const[e,t]=(0,a.useState)(r.getState());return(0,a.useEffect)((()=>{const e=r?.subscribeState((e=>{t({...e})}));return()=>{e?.()}}),[]),e}var c=s(75104);const d="1.6.3";s(78178),s(15336);let l;function p(e){var t;return l||(l=new n.b({...e,sdkVersion:c.j1.generateSdkVersion(e.adapters??[],"react",d)}),(t=l)&&(r=t)),l}},13205:function(e,t,s){s.d(t,{q:function(){return o}});var n=s(40081),a=s(75104),r=s(82309),i=s(77154);class o{constructor(e){this.availableConnectors=[],this.eventListeners=new Map,e&&this.construct(e)}construct(e){this.caipNetworks=e.networks,this.projectId=e.projectId,this.namespace=e.namespace}get connectors(){return this.availableConnectors}get networks(){return this.caipNetworks||[]}setUniversalProvider(e){this.addConnector({id:n.bq.CONNECTOR_ID.WALLET_CONNECT,type:"WALLET_CONNECT",name:r.CK.ConnectorNamesMap[n.bq.CONNECTOR_ID.WALLET_CONNECT],provider:e,imageId:r.CK.ConnectorImageIds[n.bq.CONNECTOR_ID.WALLET_CONNECT],chain:this.namespace,chains:[]})}setAuthProvider(e){this.addConnector({id:n.bq.CONNECTOR_ID.AUTH,type:"AUTH",name:"Auth",provider:e,imageId:r.CK.ConnectorImageIds[n.bq.CONNECTOR_ID.AUTH],chain:this.namespace,chains:[]})}addConnector(...e){if(e.some((e=>e.id===n.bq.CONNECTOR_ID.AUTH))){const t=e.find((e=>e.id===n.bq.CONNECTOR_ID.AUTH)),s=(0,i.CO)(a.OptionsController.state),r=a.ThemeController.getSnapshot().themeMode,o=a.ThemeController.getSnapshot().themeVariables;t?.provider?.syncDappData?.({metadata:s.metadata,sdkVersion:s.sdkVersion,projectId:s.projectId,sdkType:s.sdkType}),t.provider.syncTheme({themeMode:r,themeVariables:o,w3mThemeVariables:(0,n.tU)(o,r)})}const t=new Set;this.availableConnectors=[...e,...this.availableConnectors].filter((e=>!t.has(e.id)&&(t.add(e.id),!0))),this.emit("connectors",this.availableConnectors)}setStatus(e,t){a.AccountController.setStatus(e,t)}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,new Set),this.eventListeners.get(e)?.add(t)}off(e,t){const s=this.eventListeners.get(e);s&&s.delete(t)}emit(e,t){const s=this.eventListeners.get(e);s&&s.forEach((e=>e(t)))}}},17823:function(e,t,s){s.d(t,{D:function(){return a}});var n=s(9920);class a{constructor(){}static getInstance({projectId:e,chainId:t,enableLogger:s,onTimeout:r}){return a.instance||(a.instance=new n.Sd({projectId:e,chainId:t,enableLogger:s,onTimeout:r})),a.instance}}},70030:function(e,t,s){s.d(t,{b:function(){return f}});var n=s(75104),a=s(77703),r=s(40081),i=s(13205),o=s(15336),c=s(6729);class d extends i.q{constructor(e){super(e)}async connectWalletConnect(e){const t=this.connectors.find((e=>"WALLET_CONNECT"===e.type)),s=t?.provider;if(!this.caipNetworks||!s)throw new Error("UniversalAdapter:connectWalletConnect - caipNetworks or provider is undefined");if(n.OptionsController.state.useInjectedUniversalProvider&&n.ConnectionController.state.wcUri)return void e(n.ConnectionController.state.wcUri);s.on("display_uri",(t=>{e(t)}));const a=o.s.createNamespaces(this.caipNetworks);await s.connect({optionalNamespaces:a})}async connect(e){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:Number(e.chainId),provider:this.provider,address:""})}async disconnect(){const e=this.connectors.find((e=>"WALLET_CONNECT"===e.id)),t=e?.provider;await(t?.disconnect())}async getAccounts({namespace:e}){const t=this.provider,s=t?.session?.namespaces?.[e]?.accounts?.map((e=>{const[,,t]=e.split(":");return t})).filter(((e,t,s)=>s.indexOf(e)===t));return Promise.resolve({accounts:s.map((t=>n.j1.createAccount(e,t,"bip122"===e?"payment":"eoa")))})}async syncConnectors(){return Promise.resolve()}async getBalance(){return Promise.resolve({balance:"0",decimals:0,symbol:""})}async signMessage(e){const{provider:t,message:s,address:a}=e;if(!t)throw new Error("UniversalAdapter:signMessage - provider is undefined");let i="";if(n.RY.state.activeCaipNetwork?.chainNamespace===r.bq.CHAIN.SOLANA){i=(await t.request({method:"solana_signMessage",params:{message:c.Z.encode((new TextEncoder).encode(s)),pubkey:a}},n.RY.state.activeCaipNetwork?.caipNetworkId)).signature}else i=await t.request({method:"personal_sign",params:[s,a]},n.RY.state.activeCaipNetwork?.caipNetworkId);return{signature:i}}async estimateGas(){return Promise.resolve({gas:BigInt(0)})}async getProfile(){return Promise.resolve({profileImage:"",profileName:""})}async sendTransaction(){return Promise.resolve({hash:""})}async writeContract(){return Promise.resolve({hash:""})}async getEnsAddress(){return Promise.resolve({address:!1})}parseUnits(){return 0n}formatUnits(){return"0"}async getCapabilities(){return Promise.resolve({})}async grantPermissions(){return Promise.resolve({})}async revokePermissions(){return Promise.resolve("0x")}async syncConnection(){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:1,provider:this.provider,address:""})}async switchNetwork(e){const{caipNetwork:t}=e,s=this.connectors.find((e=>"WALLET_CONNECT"===e.type)),n=s?.provider;if(!n)throw new Error("UniversalAdapter:switchNetwork - provider is undefined");n.setDefaultChain(`${t.chainNamespace}:${String(t.id)}`)}getWalletConnectProvider(){const e=this.connectors.find((e=>"WALLET_CONNECT"===e.type)),t=e?.provider;return t}}var l=s(82309),p=s(9920),h=s(15955),u=s(71703),C=s(17823),m=s(66323),N=s(11707);const v={currentTab:0,tokenBalance:[],smartAccountDeployed:!1,addressLabels:new Map,allAccounts:[]},w={supportsAllNetworks:!0,smartAccountEnabledNetworks:[]},A=["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_getCallsStatus","wallet_sendCalls","wallet_getCapabilities","wallet_grantPermissions","wallet_revokePermissions"];let g=!1;class f{constructor(e){this.chainNamespaces=[],this.initPromise=void 0,this.reportedAlertErrors={},this.setStatus=(e,t)=>{n.MO.setConnectionStatus(e),n.AccountController.setStatus(e,t)},this.getIsConnectedState=()=>Boolean(n.RY.state.activeCaipAddress),this.setAllAccounts=(e,t)=>{n.AccountController.setAllAccounts(e,t),n.OptionsController.setHasMultipleAddresses(e?.length>1)},this.addAddressLabel=(e,t,s)=>{n.AccountController.addAddressLabel(e,t,s)},this.removeAddressLabel=(e,t)=>{n.AccountController.removeAddressLabel(e,t)},this.getCaipAddress=e=>n.RY.state.activeChain!==e&&e?n.RY.getAccountProp("caipAddress",e):n.RY.state.activeCaipAddress,this.getAddressByChainNamespace=e=>n.RY.getAccountProp("address",e),this.getAddress=e=>n.RY.state.activeChain!==e&&e?n.RY.getAccountProp("address",e):n.AccountController.state.address,this.getProvider=()=>n.AccountController.state.provider,this.getPreferredAccountType=()=>n.AccountController.state.preferredAccountType,this.setCaipAddress=(e,t)=>{n.AccountController.setCaipAddress(e,t)},this.setProvider=(e,t)=>{n.AccountController.setProvider(e,t)},this.setBalance=(e,t,s)=>{n.AccountController.setBalance(e,t,s)},this.setProfileName=(e,t)=>{n.AccountController.setProfileName(e,t)},this.setProfileImage=(e,t)=>{n.AccountController.setProfileImage(e,t)},this.resetAccount=e=>{n.AccountController.resetAccount(e)},this.setCaipNetwork=e=>{n.RY.setActiveCaipNetwork(e)},this.getCaipNetwork=e=>e?n.RY.getRequestedCaipNetworks(e).filter((t=>t.chainNamespace===e))?.[0]:n.RY.state.activeCaipNetwork||this.defaultCaipNetwork,this.getCaipNetworkId=()=>{const e=this.getCaipNetwork();if(e)return e.id},this.getCaipNetworks=e=>n.RY.getRequestedCaipNetworks(e),this.getActiveChainNamespace=()=>n.RY.state.activeChain,this.setRequestedCaipNetworks=(e,t)=>{n.RY.setRequestedCaipNetworks(e,t)},this.getApprovedCaipNetworkIds=()=>n.RY.getAllApprovedCaipNetworkIds(),this.setApprovedCaipNetworksData=e=>n.RY.setApprovedCaipNetworksData(e),this.resetNetwork=e=>{n.RY.resetNetwork(e)},this.setConnectors=e=>{const t=[...n.ConnectorController.getConnectors(),...e];n.ConnectorController.setConnectors(t)},this.addConnector=e=>{n.ConnectorController.addConnector(e)},this.getConnectors=()=>n.ConnectorController.getConnectors(),this.resetWcConnection=()=>{n.ConnectionController.resetWcConnection()},this.fetchIdentity=e=>n.Lr.fetchIdentity(e),this.setAddressExplorerUrl=(e,t)=>{n.AccountController.setAddressExplorerUrl(e,t)},this.setSmartAccountDeployed=(e,t)=>{n.AccountController.setSmartAccountDeployed(e,t)},this.setConnectedWalletInfo=(e,t)=>{n.AccountController.setConnectedWalletInfo(e,t)},this.setSmartAccountEnabledNetworks=(e,t)=>{n.RY.setSmartAccountEnabledNetworks(e,t)},this.setPreferredAccountType=(e,t)=>{n.AccountController.setPreferredAccountType(e,t)},this.getReownName=e=>n.a.getNamesForAddress(e),this.setEIP6963Enabled=e=>{n.OptionsController.setEIP6963Enabled(e)},this.setClientId=e=>{n.Lr.setClientId(e)},this.getConnectorImage=e=>n.fz.getConnectorImage(e),this.handleUnsafeRPCRequest=()=>{if(this.isOpen()){if(this.isTransactionStackEmpty())return;this.redirect("ApproveTransaction")}else this.open({view:"ApproveTransaction"})},this.options=e,this.initialize(e)}static getInstance(){return this.instance}async initialize(e){this.caipNetworks=this.extendCaipNetworks(e),this.defaultCaipNetwork=this.extendDefaultCaipNetwork(e),this.initControllers(e),this.createClients(),n.RY.initialize(e.adapters??[],this.caipNetworks),this.chainAdapters=this.createAdapters(e.adapters),await this.initChainAdapters(),this.syncRequestedNetworks(),await this.initOrContinue(),await this.syncExistingConnection(),this.version=e.sdkVersion;const{...t}=e;delete t.adapters,n.Xs.sendEvent({type:"track",event:"INITIALIZE",properties:{...t,networks:e.networks.map((e=>e.id)),siweConfig:{options:e.siweConfig?.options||{}}}}),n.Ie.set({initialized:!0})}async open(e){await this.initOrContinue(),e?.uri&&this.universalAdapter&&n.ConnectionController.setUri(e.uri),n.IN.open(e)}async close(){await this.initOrContinue(),n.IN.close()}setLoading(e){n.IN.setLoading(e)}getError(){return""}getChainId(){return n.RY.state.activeCaipNetwork?.id}switchNetwork(e){const t=this.caipNetworks?.find((t=>t.id===e.id));t?n.RY.switchActiveNetwork(t):n.AlertController.open(l.jD.ALERT_ERRORS.SWITCH_NETWORK_NOT_FOUND,"error")}getWalletProvider(){return n.RY.state.activeChain?h.h.state.providers[n.RY.state.activeChain]:null}getWalletProviderType(){return n.RY.state.activeChain?h.h.state.providerIds[n.RY.state.activeChain]:null}subscribeProviders(e){return h.h.subscribeProviders(e)}getThemeMode(){return n.ThemeController.state.themeMode}getThemeVariables(){return n.ThemeController.state.themeVariables}setThemeMode(e){n.ThemeController.setThemeMode(e),(0,a.setColorTheme)(n.ThemeController.state.themeMode)}setTermsConditionsUrl(e){n.OptionsController.setTermsConditionsUrl(e)}setPrivacyPolicyUrl(e){n.OptionsController.setPrivacyPolicyUrl(e)}setThemeVariables(e){n.ThemeController.setThemeVariables(e),(0,a.setThemeVariables)(n.ThemeController.state.themeVariables)}subscribeTheme(e){return n.ThemeController.subscribe(e)}getWalletInfo(){return n.AccountController.state.connectedWalletInfo}subscribeAccount(e){function t(){e({caipAddress:n.RY.state.activeCaipAddress,address:n.j1.getPlainAddress(n.RY.state.activeCaipAddress),isConnected:Boolean(n.RY.state.activeCaipAddress),status:n.AccountController.state.status})}n.RY.subscribe(t),n.AccountController.subscribe(t)}subscribeNetwork(e){return n.RY.subscribe((({activeCaipNetwork:t})=>{e({caipNetwork:t,chainId:t?.id,caipNetworkId:t?.caipNetworkId})}))}subscribeWalletInfo(e){return n.AccountController.subscribeKey("connectedWalletInfo",e)}subscribeShouldUpdateToAddress(e){n.AccountController.subscribeKey("shouldUpdateToAddress",e)}subscribeCaipNetworkChange(e){n.RY.subscribeKey("activeCaipNetwork",e)}getState(){return n.Ie.state}subscribeState(e){return n.Ie.subscribe(e)}showErrorMessage(e){n.SnackController.showError(e)}showSuccessMessage(e){n.SnackController.showSuccess(e)}getEvent(){return{...n.Xs.state}}subscribeEvents(e){return n.Xs.subscribe(e)}replace(e){n.RouterController.replace(e)}redirect(e){n.RouterController.push(e)}popTransactionStack(e){n.RouterController.popTransactionStack(e)}isOpen(){return n.IN.state.open}isTransactionStackEmpty(){return 0===n.RouterController.state.transactionStack.length}isTransactionShouldReplaceView(){return n.RouterController.state.transactionStack[n.RouterController.state.transactionStack.length-1]?.replace}updateFeatures(e){n.OptionsController.setFeatures(e)}updateOptions(e){const t={...n.OptionsController.state||{},...e};n.OptionsController.setOptions(t)}setConnectMethodsOrder(e){n.OptionsController.setConnectMethodsOrder(e)}setWalletFeaturesOrder(e){n.OptionsController.setWalletFeaturesOrder(e)}setCollapseWallets(e){n.OptionsController.setCollapseWallets(e)}setSocialsOrder(e){n.OptionsController.setSocialsOrder(e)}async disconnect(){await n.ConnectionController.disconnect()}getConnectMethodsOrder(){return N.JG.getConnectOrderMethod(n.OptionsController.state.features,n.ConnectorController.getConnectors())}initControllers(e){if(n.OptionsController.setDebug(!1!==e.debug),n.OptionsController.setProjectId(e.projectId),n.OptionsController.setSdkVersion(e.sdkVersion),n.OptionsController.setEnableEmbedded(e.enableEmbedded),e.allowUnsupportedChain&&n.OptionsController.setAllowUnsupportedChain(e.allowUnsupportedChain),!e.projectId)return void n.AlertController.open(l.jD.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED,"error");const t=this.getDefaultMetaData();!e.metadata&&t&&(e.metadata=t),this.setDefaultNetwork(),n.OptionsController.setAllWallets(e.allWallets),n.OptionsController.setIncludeWalletIds(e.includeWalletIds),n.OptionsController.setExcludeWalletIds(e.excludeWalletIds),e.excludeWalletIds&&n.ApiController.searchWalletByIds({ids:e.excludeWalletIds}),n.OptionsController.setFeaturedWalletIds(e.featuredWalletIds),n.OptionsController.setTokens(e.tokens),n.OptionsController.setTermsConditionsUrl(e.termsConditionsUrl),n.OptionsController.setPrivacyPolicyUrl(e.privacyPolicyUrl),n.OptionsController.setCustomWallets(e.customWallets),n.OptionsController.setFeatures(e.features),n.OptionsController.setEnableWalletConnect(!1!==e.enableWalletConnect),n.OptionsController.setEnableWalletGuide(!1!==e.enableWalletGuide),n.OptionsController.setEnableWallets(!1!==e.enableWallets),n.OptionsController.setEIP6963Enabled(!1!==e.enableEIP6963),n.OptionsController.setEnableAuthLogger(!1!==e.enableAuthLogger),e.metadata&&n.OptionsController.setMetadata(e.metadata),e.themeMode&&n.ThemeController.setThemeMode(e.themeMode),e.themeVariables&&n.ThemeController.setThemeVariables(e.themeVariables),e.disableAppend&&n.OptionsController.setDisableAppend(Boolean(e.disableAppend)),e.siwx&&n.OptionsController.setSIWX(e.siwx);const s=e.adapters?.find((e=>e.namespace===r.bq.CHAIN.EVM));if(s&&e.siweConfig){if(e.siwx)throw new Error("Cannot set both `siweConfig` and `siwx` options");n.OptionsController.setSIWX(e.siweConfig.mapToSIWX())}}getDefaultMetaData(){return"undefined"!=typeof window&&"undefined"!=typeof document?{name:document.getElementsByTagName("title")?.[0]?.textContent||"",description:document.querySelector('meta[property="og:description"]')?.content||"",url:window.location.origin,icons:[document.querySelector('link[rel~="icon"]')?.href||""]}:null}setUnsupportedNetwork(e){const t=this.getActiveChainNamespace();t&&n.RY.setActiveCaipNetwork({id:e,caipNetworkId:`${t}:${e}`,name:"Unknown Network",chainNamespace:t,nativeCurrency:{name:"",decimals:0,symbol:""},rpcUrls:{default:{http:[]}}})}extendCaipNetworks(e){return l.fZ.extendCaipNetworks(e.networks,{customNetworkImageUrls:e.chainImages,projectId:e.projectId})}extendDefaultCaipNetwork(e){const t=e.networks.find((t=>t.id===e.defaultNetwork?.id));return t?l.fZ.extendCaipNetwork(t,{customNetworkImageUrls:e.chainImages,projectId:e.projectId}):void 0}createClients(){this.connectionControllerClient={connectWalletConnect:async e=>{const t=this.getAdapter(n.RY.state.activeChain);this.universalProvider?.on("display_uri",e),this.setClientId(await(this.universalProvider?.client?.core?.crypto?.getClientId())||null);let s=!1;if(this.universalProvider){const e=this.caipNetworks?.map((e=>e.caipNetworkId))||[];s=await n.wf.universalProviderAuthenticate({universalProvider:this.universalProvider,chains:e,methods:A})}s?this.close():(await(t?.connectWalletConnect(e,this.getCaipNetwork()?.id)),n.MO.setConnectedNamespaces([...n.RY.state.chains.keys()])),await this.syncWalletConnectAccount()},connectExternal:async({id:e,info:t,type:s,provider:a,chain:r,caipNetwork:i})=>{const o=n.RY.state.activeChain;if(r&&r!==o&&!i){const e=this.caipNetworks?.find((e=>e.chainNamespace===r));e&&this.setCaipNetwork(e)}const c=r||o,d=this.getAdapter(c);if(!d)throw new Error("Adapter not found");const l=await d.connect({id:e,info:t,type:s,provider:a,chainId:i?.id||this.getCaipNetwork()?.id,rpcUrl:i?.rpcUrls?.default?.http?.[0]||this.getCaipNetwork()?.rpcUrls?.default?.http?.[0]});if(n.MO.addConnectedNamespace(c),l){this.syncProvider({...l,chainNamespace:c}),await this.syncAccount({...l,chainNamespace:c});const{accounts:t}=await d.getAccounts({namespace:c,id:e});this.setAllAccounts(t,c)}this.caipNetworks?.some((e=>e.id===l?.chainId))||l?.chainId&&this.setUnsupportedNetwork(l.chainId)},reconnectExternal:async({id:e,info:t,type:s,provider:a})=>{const r=n.RY.state.activeChain,i=this.getAdapter(r);i?.reconnect&&(await(i?.reconnect({id:e,info:t,type:s,provider:a,chainId:this.getCaipNetwork()?.id})),n.MO.addConnectedNamespace(r))},disconnect:async()=>{const e=n.RY.state.activeChain,t=this.getAdapter(e),s=h.h.getProvider(e),a=h.h.state.providerIds[e];await(t?.disconnect({provider:s,providerType:a})),n.MO.removeConnectedNamespace(e),h.h.resetChain(e),this.setStatus("disconnected",e)},checkInstalled:e=>e?e.some((e=>Boolean(window.ethereum?.[String(e)]))):Boolean(window.ethereum),signMessage:async e=>{const t=this.getAdapter(n.RY.state.activeChain),s=await(t?.signMessage({message:e,address:n.AccountController.state.address,provider:h.h.getProvider(n.RY.state.activeChain)}));return s?.signature||""},sendTransaction:async e=>{if(e.chainNamespace===r.bq.CHAIN.EVM){const t=this.getAdapter(n.RY.state.activeChain),s=h.h.getProvider(n.RY.state.activeChain),a=await(t?.sendTransaction({...e,provider:s}));return a?.hash||""}return""},estimateGas:async e=>{if(e.chainNamespace===r.bq.CHAIN.EVM){const t=this.getAdapter(n.RY.state.activeChain),s=h.h.getProvider(n.RY.state.activeChain),a=this.getCaipNetwork();if(!a)throw new Error("CaipNetwork is undefined");const r=await(t?.estimateGas({...e,provider:s,caipNetwork:a}));return r?.gas||0n}return 0n},getEnsAvatar:async()=>{const e=this.getAdapter(n.RY.state.activeChain),t=await(e?.getProfile({address:n.AccountController.state.address,chainId:Number(this.getCaipNetwork()?.id)}));return t?.profileImage||!1},getEnsAddress:async e=>{const t=this.getAdapter(n.RY.state.activeChain),s=this.getCaipNetwork();if(!s)return!1;const a=await(t?.getEnsAddress({name:e,caipNetwork:s}));return a?.address||!1},writeContract:async e=>{const t=this.getAdapter(n.RY.state.activeChain),s=this.getCaipNetwork(),a=this.getCaipAddress(),r=h.h.getProvider(n.RY.state.activeChain);if(!s||!a)throw new Error("CaipNetwork or CaipAddress is undefined");const i=await(t?.writeContract({...e,caipNetwork:s,provider:r,caipAddress:a}));return i?.hash},parseUnits:(e,t)=>{const s=this.getAdapter(n.RY.state.activeChain);return s?.parseUnits({value:e,decimals:t})??0n},formatUnits:(e,t)=>{const s=this.getAdapter(n.RY.state.activeChain);return s?.formatUnits({value:e,decimals:t})??"0"},getCapabilities:async e=>{const t=this.getAdapter(n.RY.state.activeChain);await(t?.getCapabilities(e))},grantPermissions:async e=>{const t=this.getAdapter(n.RY.state.activeChain);return await(t?.grantPermissions(e))},revokePermissions:async e=>{const t=this.getAdapter(n.RY.state.activeChain);return t?.revokePermissions?await t.revokePermissions(e):"0x"}},this.networkControllerClient={switchCaipNetwork:async e=>{if(e)if(n.AccountController.state.address&&e.chainNamespace===n.RY.state.activeChain){const t=this.getAdapter(n.RY.state.activeChain),s=h.h.getProvider(n.RY.state.activeChain),a=h.h.state.providerIds[n.RY.state.activeChain];await(t?.switchNetwork({caipNetwork:e,provider:s,providerType:a})),this.setCaipNetwork(e),await this.syncAccount({address:n.AccountController.state.address,chainId:n.RY.state.activeCaipNetwork?.id,chainNamespace:e.chainNamespace})}else if(n.AccountController.state.address){const t=h.h.state.providerIds[n.RY.state.activeChain];if(t===l.bq.CONNECTOR_TYPE_AUTH)try{n.RY.state.activeChain=e.chainNamespace,await(this.connectionControllerClient?.connectExternal?.({id:r.bq.CONNECTOR_ID.AUTH,provider:this.authProvider,chain:e.chainNamespace,chainId:e.id,type:l.bq.CONNECTOR_TYPE_AUTH,caipNetwork:e}))}catch(s){const n=this.getAdapter(e.chainNamespace);await(n?.switchNetwork({caipNetwork:e,provider:this.authProvider,providerType:t}))}else if("WALLET_CONNECT"===t)this.setCaipNetwork(e),this.syncWalletConnectAccount();else{this.setCaipNetwork(e);const t=this.getAddressByChainNamespace(e.chainNamespace);t&&this.syncAccount({address:t,chainId:e.id,chainNamespace:e.chainNamespace})}}else this.setCaipNetwork(e)},getApprovedCaipNetworksData:async()=>{if(h.h.state.providerIds[n.RY.state.activeChain]===l.bq.CONNECTOR_TYPE_WALLET_CONNECT){const e=this.universalProvider?.session?.namespaces;return{supportsAllNetworks:"MetaMask Wallet"===this.universalProvider?.session?.peer?.metadata.name,approvedCaipNetworkIds:this.getChainsFromNamespaces(e)}}return{supportsAllNetworks:!0,approvedCaipNetworkIds:[]}}},this.networkControllerClient&&this.connectionControllerClient&&n.ConnectionController.setClient(this.connectionControllerClient)}setupAuthConnectorListeners(e){e.onRpcRequest((t=>{p.$D.checkIfRequestExists(t)?p.$D.checkIfRequestIsSafe(t)||this.handleUnsafeRPCRequest():(this.open(),console.error(p.y_.RPC_METHOD_NOT_ALLOWED_MESSAGE,{method:t.method}),setTimeout((()=>{this.showErrorMessage(p.y_.RPC_METHOD_NOT_ALLOWED_UI_MESSAGE)}),300),e.rejectRpcRequests())})),e.onRpcError((()=>{this.isOpen()&&(this.isTransactionStackEmpty()?this.close():this.popTransactionStack(!0))})),e.onRpcSuccess(((e,t)=>{p.$D.checkIfRequestIsSafe(t)||(this.isTransactionStackEmpty()?(this.close(),n.AccountController.state.address&&n.RY.state.activeCaipNetwork?.id&&this.updateBalance()):(this.popTransactionStack(),n.AccountController.state.address&&n.RY.state.activeCaipNetwork?.id&&this.updateBalance()))})),e.onNotConnected((()=>{const e=n.RY.state.activeChain;n.MO.getConnectedConnectorId(e)===r.bq.CONNECTOR_ID.AUTH&&(this.setCaipAddress(void 0,e),this.setLoading(!1))})),e.onIsConnected((()=>{e.connect(),n.MO.addConnectedNamespace(n.RY.state.activeChain)})),e.onConnect((async t=>{const s=n.RY.state.activeChain;this.syncProvider({type:l.bq.CONNECTOR_TYPE_AUTH,provider:e,id:r.bq.CONNECTOR_ID.AUTH,chainNamespace:s});const a=s===r.bq.CHAIN.EVM?`eip155:${t.chainId}:${t.address}`:`${t.chainId}:${t.address}`;this.setSmartAccountDeployed(Boolean(t.smartAccountDeployed),s),l.gk.isLowerCaseMatch(t.address,n.AccountController.state.address)||this.syncIdentity({address:t.address,chainId:t.chainId,chainNamespace:s}),this.setCaipAddress(a,s);const i=t.preferredAccountType||"eoa";this.setPreferredAccountType(i,s);const o=t.accounts?.map((e=>n.j1.createAccount(s,e.address,s===r.bq.CHAIN.EVM?e.type:"eoa")));this.setAllAccounts(o||[n.j1.createAccount(s,t.address,i)],s),await e.getSmartAccountEnabledNetworks(),this.setLoading(!1)})),e.onGetSmartAccountEnabledNetworks((e=>{this.setSmartAccountEnabledNetworks(e,n.RY.state.activeChain)})),e.onSetPreferredAccount((({address:e,type:t})=>{e&&this.setPreferredAccountType(t,n.RY.state.activeChain)}))}async syncAuthConnector(e){this.setLoading(!0);const t=e.getLoginEmailUsed();this.setLoading(t),t&&this.setStatus("connecting",n.RY.state.activeChain),this.setupAuthConnectorListeners(e);const{isConnected:s}=await e.isConnected(),a=n.MO.getActiveNamespace();a&&(s&&this.connectionControllerClient?.connectExternal?(await(this.connectionControllerClient?.connectExternal({id:r.bq.CONNECTOR_ID.AUTH,info:{name:r.bq.CONNECTOR_ID.AUTH},type:l.bq.CONNECTOR_TYPE_AUTH,provider:e,chainId:n.RY.state.activeCaipNetwork?.id,chain:a})),this.setStatus("connected",a)):n.MO.getConnectedConnectorId(a)===r.bq.CONNECTOR_ID.AUTH&&(this.setStatus("disconnected",a),n.MO.removeConnectedNamespace(a))),this.setLoading(!1)}listenWalletConnect(){this.universalProvider&&(this.universalProvider.on("disconnect",(()=>{this.chainNamespaces.forEach((e=>{this.resetAccount(e)})),n.ConnectionController.resetWcConnection()})),this.universalProvider.on("chainChanged",(e=>{const t=this.caipNetworks?.find((t=>t.chainNamespace===n.RY.state.activeChain&&t.id==e)),s=this.getCaipNetwork();t?s&&s?.id===t?.id||this.setCaipNetwork(t):this.setUnsupportedNetwork(e)})),this.universalProvider.on("session_event",(e=>{if(m.s.isSessionEventData(e)){const{name:t,data:s}=e.params.event;"accountsChanged"===t&&Array.isArray(s)&&n.j1.isCaipAddress(s[0])&&this.syncAccount(r.uB.parseCaipAddress(s[0]))}})))}listenAdapter(e){const t=this.getAdapter(e);if(!t)return;const s=n.MO.getConnectionStatus();"connected"===s?this.setStatus("connecting",e):this.setStatus(s,e),t.on("switchNetwork",(({address:t,chainId:s})=>{s&&this.caipNetworks?.find((e=>e.id===s))?n.RY.state.activeChain===e&&t?this.syncAccount({address:t,chainId:s,chainNamespace:e}):n.RY.state.activeChain===e&&n.AccountController.state.address&&this.syncAccount({address:n.AccountController.state.address,chainId:s,chainNamespace:e}):this.setUnsupportedNetwork(s)})),t.on("disconnect",this.disconnect.bind(this)),t.on("pendingTransactions",(()=>{const e=n.AccountController.state.address,t=n.RY.state.activeCaipNetwork;e&&t?.id&&this.updateBalance()})),t.on("accountChanged",(({address:t,chainId:s})=>{n.RY.state.activeChain===e&&s?this.syncAccount({address:t,chainId:s,chainNamespace:e}):n.RY.state.activeChain===e&&n.RY.state.activeCaipNetwork?.id&&this.syncAccount({address:t,chainId:n.RY.state.activeCaipNetwork?.id,chainNamespace:e})}))}updateBalance(){const e=this.getAdapter(n.RY.state.activeChain);e&&e.getBalance({address:n.AccountController.state.address,chainId:n.RY.state.activeCaipNetwork?.id,caipNetwork:this.getCaipNetwork(),tokens:this.options.tokens})}getChainsFromNamespaces(e={}){return Object.values(e).flatMap((e=>{const t=e.chains||[],s=e.accounts.map((e=>{const{chainId:t,chainNamespace:s}=r.uB.parseCaipAddress(e);return`${s}:${t}`}));return Array.from(new Set([...t,...s]))}))}async syncWalletConnectAccount(){const e=this.getAdapter(n.RY.state.activeChain);this.chainNamespaces.forEach((async t=>{const s=this.universalProvider?.session?.namespaces?.[t]?.accounts||[],a=n.RY.state.activeCaipNetwork?.id,i=s.find((e=>{const{chainId:t}=r.uB.parseCaipAddress(e);return t===a?.toString()}))||s[0];if(i){const s=r.uB.validateCaipAddress(i),{chainId:a,address:o}=r.uB.parseCaipAddress(s);if(h.h.setProviderId(t,l.bq.CONNECTOR_TYPE_WALLET_CONNECT),this.caipNetworks&&n.RY.state.activeCaipNetwork&&e?.namespace!==r.bq.CHAIN.EVM){const s=e?.getWalletConnectProvider({caipNetworks:this.caipNetworks,provider:this.universalProvider,activeCaipNetwork:n.RY.state.activeCaipNetwork});h.h.setProvider(t,s)}else h.h.setProvider(t,this.universalProvider);if(n.MO.setConnectedConnectorId(t,r.bq.CONNECTOR_ID.WALLET_CONNECT),n.MO.addConnectedNamespace(t),"wagmi"===e?.adapterType)try{await(e?.connect({id:"walletConnect",type:"WALLET_CONNECT",chainId:n.RY.state.activeCaipNetwork?.id}))}catch(t){e?.reconnect&&e?.reconnect({id:"walletConnect",type:"WALLET_CONNECT"})}this.syncWalletConnectAccounts(t),await this.syncAccount({address:o,chainId:a,chainNamespace:t})}})),await n.RY.setApprovedCaipNetworksData(n.RY.state.activeChain)}syncWalletConnectAccounts(e){const t=this.universalProvider?.session?.namespaces?.[e]?.accounts?.map((e=>{const{address:t}=r.uB.parseCaipAddress(e);return t})).filter(((e,t,s)=>s.indexOf(e)===t));t&&this.setAllAccounts(t.map((t=>n.j1.createAccount(e,t,"bip122"===e?"payment":"eoa"))),e)}syncProvider({type:e,provider:t,id:s,chainNamespace:a}){h.h.setProviderId(a,e),h.h.setProvider(a,t),n.MO.setConnectedConnectorId(a,s)}async syncAccount(e){const{address:t,chainId:s,chainNamespace:a}=e,{namespace:i,chainId:o}=n.MO.getActiveNetworkProps(),c=s||o;if(l.gk.isLowerCaseMatch(t,n.AccountController.state.address)||(this.setCaipAddress(`${a}:${s}:${t}`,a),await this.syncIdentity({address:t,chainId:s,chainNamespace:a})),this.setStatus("connected",a),c&&a===i){let e=this.caipNetworks?.find((e=>e.id.toString()===c.toString())),s=this.caipNetworks?.find((e=>e.chainNamespace===a));if(!n.RY.getNetworkProp("supportsAllNetworks",a)){const t=this.getApprovedCaipNetworkIds()||[],n=t.find((e=>r.uB.parseCaipNetworkId(e)?.chainId===c.toString())),i=t.find((e=>r.uB.parseCaipNetworkId(e)?.chainNamespace===a));e=this.caipNetworks?.find((e=>e.caipNetworkId===n)),s=this.caipNetworks?.find((e=>e.caipNetworkId===i))}const i=e||s;this.setCaipNetwork(i),this.syncConnectedWalletInfo(a),await this.syncBalance({address:t,chainId:i.id,chainNamespace:a})}}async syncBalance(e){const t=this.getAdapter(e.chainNamespace),s=r.p1.getNetworksByNamespace(this.caipNetworks,e.chainNamespace).find((t=>t.id.toString()===e.chainId.toString()));if(!s)return;if(s.testnet)return void this.setBalance("0.00",s.nativeCurrency.symbol,s.chainNamespace);const n=await(t?.getBalance({address:e.address,chainId:e.chainId,caipNetwork:s,tokens:this.options.tokens}));n&&this.setBalance(n.balance,n.symbol,e.chainNamespace)}syncConnectedWalletInfo(e){const t=n.MO.getConnectedConnectorId(e),s=h.h.state.providerIds[e];if(s===l.bq.CONNECTOR_TYPE_ANNOUNCED||s===l.bq.CONNECTOR_TYPE_INJECTED){if(t){const s=this.getConnectors().find((e=>e.id===t));if(s){const{info:t,name:n,imageUrl:a}=s,r=a||this.getConnectorImage(s);this.setConnectedWalletInfo({name:n,icon:r,...t},e)}}}else if(s===l.bq.CONNECTOR_TYPE_WALLET_CONNECT){const t=h.h.getProvider(e);t?.session&&this.setConnectedWalletInfo({...t.session.peer.metadata,name:t.session.peer.metadata.name,icon:t.session.peer.metadata.icons?.[0]},e)}else if(t){if(t===r.bq.CONNECTOR_ID.COINBASE){const t=this.getConnectors().find((e=>e.id===r.bq.CONNECTOR_ID.COINBASE));this.setConnectedWalletInfo({name:"Coinbase Wallet",icon:this.getConnectorImage(t)},e)}this.setConnectedWalletInfo({name:t},e)}}async syncIdentity({address:e,chainId:t,chainNamespace:s}){const n=this.caipNetworks?.find((e=>e.caipNetworkId===`${s}:${t}`));if(s===r.bq.CHAIN.EVM&&!n?.testnet)try{const{name:n,avatar:a}=await this.fetchIdentity({address:e});if(this.setProfileName(n,s),this.setProfileImage(a,s),!n){await this.syncReownName(e,s);const n=this.getAdapter(s),a=await(n?.getProfile({address:e,chainId:Number(t)}));a?.profileName?(this.setProfileName(a.profileName,s),a.profileImage&&this.setProfileImage(a.profileImage,s)):(await this.syncReownName(e,s),this.setProfileImage(null,s))}}catch{1===t?await this.syncReownName(e,s):(await this.syncReownName(e,s),this.setProfileImage(null,s))}}async syncReownName(e,t){try{const s=await this.getReownName(e);if(s[0]){const e=s[0];this.setProfileName(e.name,t)}else this.setProfileName(null,t)}catch{this.setProfileName(null,t)}}syncRequestedNetworks(){const e=[...new Set(this.caipNetworks?.map((e=>e.chainNamespace)))];this.chainNamespaces=e,e.forEach((e=>this.setRequestedCaipNetworks(this.caipNetworks?.filter((t=>t.chainNamespace===e))??[],e)))}async syncAdapterConnection(e){const t=this.getAdapter(e),s=n.MO.getConnectedConnectorId(e),a=this.getCaipNetwork();try{if(!t||!s)throw new Error(`Adapter or connectorId not found for namespace ${e}`);const r=await(t?.syncConnection({namespace:e,id:s,chainId:a?.id,rpcUrl:a?.rpcUrls?.default?.http?.[0]}));if(r){const a=await(t?.getAccounts({namespace:e,id:s}));a&&a.accounts.length>0?this.setAllAccounts(a.accounts,e):this.setAllAccounts([n.j1.createAccount(e,r.address,"eoa")],e),this.syncProvider({...r,chainNamespace:e}),await this.syncAccount({...r,chainNamespace:e}),this.setStatus("connected",e)}else this.setStatus("disconnected",e)}catch(t){console.warn(`Error syncing connection for namespace ${e}`,t),n.MO.deleteConnectedConnectorId(e),this.setStatus("disconnected",e)}}async syncNamespaceConnection(e){try{const t=n.MO.getConnectedConnectorId(e),s=this.authProvider?.getLoginEmailUsed();if(s)return;switch(this.setStatus("connecting",e),t){case r.bq.CONNECTOR_ID.WALLET_CONNECT:await this.syncWalletConnectAccount();break;case r.bq.CONNECTOR_ID.AUTH:break;default:await this.syncAdapterConnection(e)}}catch(t){console.warn("AppKit couldn't sync existing connection",t),n.MO.deleteConnectedConnectorId(e),this.setStatus("disconnected",e)}}async syncExistingConnection(){const e=n.MO.getConnectedNamespaces();e?.length>0&&await Promise.allSettled(e.map((e=>this.syncNamespaceConnection(e))))}getAdapter(e){return this.chainAdapters?.[e]}createUniversalProvider(){return!this.universalProviderInitPromise&&n.j1.isClient()&&this.options?.projectId&&(this.universalProviderInitPromise=this.initializeUniversalAdapter()),this.universalProviderInitPromise}handleAlertError(e){const t=Object.entries(l.jD.UniversalProviderErrors).find((([,{message:t}])=>e.message.includes(t))),[s,a]=t??[],{message:r,alertErrorKey:i}=a??{};if(s&&r&&!this.reportedAlertErrors[s]){const e=l.jD.ALERT_ERRORS[i];e&&(n.AlertController.open(e,"error"),this.reportedAlertErrors[s]=!0)}}async initializeUniversalAdapter(){const e=l.eF.createLogger(((e,...t)=>{e&&this.handleAlertError(e),console.error(...t)})),t={projectId:this.options?.projectId,metadata:{name:this.options?.metadata?this.options?.metadata.name:"",description:this.options?.metadata?this.options?.metadata.description:"",url:this.options?.metadata?this.options?.metadata.url:"",icons:this.options?.metadata?this.options?.metadata.icons:[""]},logger:e};n.OptionsController.setUsingInjectedUniversalProvider(Boolean(this.options?.universalProvider)),this.universalProvider=this.options.universalProvider??await u.Z.init(t),this.listenWalletConnect()}async getUniversalProvider(){if(!this.universalProvider)try{await this.createUniversalProvider()}catch(e){throw new Error("AppKit:getUniversalProvider - Cannot create provider")}return this.universalProvider}createAuthProvider(){const e=void 0===this.options?.features?.email?n.bq.DEFAULT_FEATURES.email:this.options?.features?.email,t=this.options?.features?.socials?this.options?.features?.socials?.length>0:n.bq.DEFAULT_FEATURES.socials,s=e||t;!this.authProvider&&this.options?.projectId&&s&&(this.authProvider=C.D.getInstance({projectId:this.options.projectId,enableLogger:this.options.enableAuthLogger,onTimeout:()=>{n.AlertController.open(l.jD.ALERT_ERRORS.SOCIALS_TIMEOUT,"error")}}),this.syncAuthConnector(this.authProvider))}async createUniversalProviderForAdapter(e){await this.getUniversalProvider(),this.universalProvider&&this.chainAdapters?.[e]?.setUniversalProvider?.(this.universalProvider)}createAuthProviderForAdapter(e){this.createAuthProvider(),this.authProvider&&this.chainAdapters?.[e]?.setAuthProvider?.(this.authProvider)}createAdapters(e){return this.syncRequestedNetworks(),this.chainNamespaces.reduce(((t,s)=>{const a=e?.find((e=>e.namespace===s));return a?(t[s]=a,t[s].namespace=s,t[s].construct({namespace:s,projectId:this.options?.projectId,networks:this.caipNetworks})):t[s]=new d({namespace:s,networks:this.caipNetworks}),n.RY.state.chains.set(s,{namespace:s,connectionControllerClient:this.connectionControllerClient,networkControllerClient:this.networkControllerClient,networkState:w,accountState:v,caipNetworks:this.caipNetworks??[]}),t}),{})}async createConnectorsForAdapter(e){await this.createUniversalProviderForAdapter(e),this.createAuthProviderForAdapter(e)}onConnectors(e){const t=this.getAdapter(e);t?.on("connectors",this.setConnectors.bind(this))}async initChainAdapters(){await Promise.all(this.chainNamespaces.map((async e=>{this.onConnectors(e),this.listenAdapter(e),this.chainAdapters?.[e].syncConnectors(this.options,this),await this.createConnectorsForAdapter(e)})))}setDefaultNetwork(){const e=n.MO.getActiveCaipNetworkId(),t=(e&&this.caipNetworks?.length?this.caipNetworks.find((t=>t.caipNetworkId===e)):void 0)||this.defaultCaipNetwork||this.caipNetworks?.[0];t&&n.RY.setActiveCaipNetwork(t)}async initOrContinue(){return this.initPromise||g||!n.j1.isClient()||(g=!0,this.initPromise=new Promise((async e=>{await Promise.all([Promise.resolve().then(s.bind(s,77703)),s.e(1557).then(s.bind(s,21557))]);const t=document.createElement("w3m-modal");n.OptionsController.state.disableAppend||document.body.insertAdjacentElement("beforeend",t),e()}))),this.initPromise}}},28084:function(e,t,s){s.d(t,{yXc:function(){return n.yXc},DMT:function(){return n.DMT},pLm:function(){return n.pLm},ueV:function(){return n.ueV},eGR:function(){return n.eGR},Q0d:function(){return n.Q0d},KHm:function(){return n.KHm},_1N:function(){return n._1N},RJ0:function(){return n.RJ0},v4o:function(){return n.v4o},yue:function(){return n.yue},Zjg:function(){return r},ol5:function(){return i},jMx:function(){return n.jMx}});var n=s(20918);function a(e){return{formatters:void 0,fees:void 0,serializers:void 0,...e}}const r=a({id:"5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",name:"Solana",network:"solana-mainnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!1,chainNamespace:"solana",caipNetworkId:"solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",deprecatedCaipNetworkId:"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ"}),i=a({id:"EtWTRABZaYq6iMfeYKouRu166VU2xqa1",name:"Solana Devnet",network:"solana-devnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!0,chainNamespace:"solana",caipNetworkId:"solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1",deprecatedCaipNetworkId:"solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K"});a({id:"4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z",name:"Solana Testnet",network:"solana-testnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!0,chainNamespace:"solana",caipNetworkId:"solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z"}),a({id:"000000000019d6689c085ae165831e93",caipNetworkId:"bip122:000000000019d6689c085ae165831e93",chainNamespace:"bip122",name:"Bitcoin",nativeCurrency:{name:"Bitcoin",symbol:"BTC",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}}}),a({id:"000000000933ea01ad0ee984209779ba",caipNetworkId:"bip122:000000000933ea01ad0ee984209779ba",chainNamespace:"bip122",name:"Bitcoin Testnet",nativeCurrency:{name:"Bitcoin",symbol:"BTC",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},testnet:!0})},15955:function(e,t,s){s.d(t,{h:function(){return o}});var n=s(77154),a=s(96146);const r={eip155:void 0,solana:void 0,polkadot:void 0,bip122:void 0},i=(0,n.sj)({providers:{...r},providerIds:{...r}}),o={state:i,subscribeKey(e,t){return(0,a.VW)(i,e,t)},subscribeProviders(e){return(0,n.Ld)(i.providers,(()=>e(i.providers)))},setProvider(e,t){t&&(i.providers[e]=(0,n.iH)(t))},getProvider(e){return i.providers[e]},setProviderId(e,t){t&&(i.providerIds[e]=t)},getProviderId(e){return i.providerIds[e]},reset(){i.providers={...r},i.providerIds={...r}},resetChain(e){i.providers[e]=void 0,i.providerIds[e]=void 0}}},66323:function(e,t,s){s.d(t,{s:function(){return r}});var n=s(75104),a=s(28084);const r={getMethodsByChainNamespace(e){switch(e){case"solana":return["solana_signMessage","solana_signTransaction","solana_requestAccounts","solana_getAccounts","solana_signAllTransactions","solana_signAndSendTransaction"];case"eip155":return["personal_sign","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendRawTransaction","eth_sendTransaction","wallet_getCapabilities","wallet_sendCalls","wallet_showCallsStatus","wallet_getCallsStatus","wallet_grantPermissions","wallet_revokePermissions","wallet_switchEthereumChain"];case"bip122":return["sendTransfer","signMessage","signPsbt","getAccountAddresses"];default:return[]}},createNamespaces(e){return e.reduce(((e,t)=>{const{id:s,chainNamespace:n,rpcUrls:r}=t,i=r.default.http[0],o=this.getMethodsByChainNamespace(n);e[n]||(e[n]={methods:o,events:["accountsChanged","chainChanged"],chains:[],rpcMap:{}});const c=`${n}:${s}`,d=e[n];switch(d.chains.push(c),c){case a.Zjg.caipNetworkId:d.chains.push(a.Zjg.deprecatedCaipNetworkId);break;case a.ol5.caipNetworkId:d.chains.push(a.ol5.deprecatedCaipNetworkId)}return d?.rpcMap&&i&&(d.rpcMap[s]=i),e}),{})},resolveReownName:async e=>{const t=await n.a.resolveName(e),s=Object.values(t?.addresses)||[];return s[0]?.address||!1},getChainsFromNamespaces(e={}){return Object.values(e).flatMap((e=>{const t=e.chains||[],s=e.accounts.map((e=>{const[t,s]=e.split(":");return`${t}:${s}`}));return Array.from(new Set([...t,...s]))}))},isSessionEventData(e){return"object"==typeof e&&null!==e&&"id"in e&&"topic"in e&&"params"in e&&"object"==typeof e.params&&null!==e.params&&"chainId"in e.params&&"event"in e.params&&"object"==typeof e.params.event&&null!==e.params.event}}},15336:function(e,t,s){s.d(t,{s:function(){return n.s}});var n=s(66323)}}]);