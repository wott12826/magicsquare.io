"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[547],{9244:function(e,t,n){n.d(t,{K:function(){return J}});n(73942);var a=n(32194),i=n(75104),s=n(6560),o=n(33651),r=n(37891),c=n(65762),d=n(43602),C=n(15096),h=n(91934),N=n(71558),g=n(65521),l=n(67237),p=n(15516),u=n(9466),E=n(92591),f=n(56489),m=n(79811),w=n(91631),b=n(46654),I=n(35692),O=n(3534),T=n(57290),_=n(59969),A=n(64072),R=n(40081),v=n(56440),D=(n(9920),n(19371)),y=n(39321),k=n(82309),P=n(47978);var q=n(71168),U=n(43585),L=n(71621),M=(n(71703),n(59540));function S(e,t,n){const a=e.isNewChainsStale??!0;let s,o,r,c,d,C,h;return(0,v.K)((e=>({id:"walletConnect",name:"WalletConnect",type:S.type,async setup(){const e=await this.getProvider().catch((()=>null));e&&(c||(c=this.onConnect.bind(this),e.on("connect",c)),C||(C=this.onSessionDelete.bind(this),e.on("session_delete",C)))},async connect({...e}={}){try{const t=await this.getProvider();if(!t)throw new U.M;d||(d=this.onDisplayUri,t.on("display_uri",d));const a=await this.isChainsStale();if(t.session&&a&&await t.disconnect(),!t.session||a){const a=q.sQ.createNamespaces(n);await t.connect({optionalNamespaces:a,..."pairingTopic"in e?{pairingTopic:e.pairingTopic}:{}}),this.setRequestedChainsIds(n.map((e=>Number(e.id))))}const i=(await t.enable()).map((e=>(0,y.K)(e))),s=await this.getChainId();return d&&(t.removeListener("display_uri",d),d=void 0),c&&(t.removeListener("connect",c),c=void 0),o||(o=this.onAccountsChanged.bind(this),t.on("accountsChanged",o)),r||(r=this.onChainChanged.bind(this),t.on("chainChanged",r)),h||(h=this.onDisconnect.bind(this),t.on("disconnect",h)),C||(C=this.onSessionDelete.bind(this),t.on("session_delete",C)),{accounts:i,chainId:s}}catch(e){if(/(user rejected|connection request reset)/i.test(e?.message))throw new D.ab(e);throw e}},async disconnect(){const e=await this.getProvider();try{await(e?.disconnect())}catch(e){if(!/No matching key/i.test(e.message))throw e}finally{r&&(e?.removeListener("chainChanged",r),r=void 0),h&&(e?.removeListener("disconnect",h),h=void 0),c||(c=this.onConnect.bind(this),e?.on("connect",c)),o&&(e?.removeListener("accountsChanged",o),o=void 0),C&&(e?.removeListener("session_delete",C),C=void 0),this.setRequestedChainsIds([])}},async getAccounts(){const e=await this.getProvider();if(!e?.session?.namespaces)return[];const t=e?.session?.namespaces[R.bq.CHAIN.EVM]?.accounts;return t?.map((e=>e.split(":")[2]))??[]},async getProvider({chainId:e}={}){s||(s=await t.getUniversalProvider(),s?.events.setMaxListeners(Number.POSITIVE_INFINITY));const n=i.MO.getActiveNamespace(),a=t.getCaipNetwork()?.id;if(e&&a!==e&&n){const e=i.MO.getStoredActiveCaipNetworkId(),a=t?.getCaipNetworks(n),s=a?.find((t=>t.id===e));s&&s.chainNamespace===R.bq.CHAIN.EVM&&await(this.switchChain?.({chainId:Number(s.id)}))}return s},async getChainId(){const e=t.getCaipNetwork()?.id;if(e)return e;const a=await this.getProvider(),i=a.session?.namespaces[R.bq.CHAIN.EVM]?.chains?.[0],s=n.find((e=>e.id===i));return s?.id},async isAuthorized(){try{const[e,t]=await Promise.all([this.getAccounts(),this.getProvider()]);if(!e.length)return!1;return!await this.isChainsStale()||!t.session||(await t.disconnect().catch((()=>{})),!1)}catch{return!1}},async switchChain({addEthereumChainParameter:t,chainId:a}){const i=await this.getProvider();if(!i)throw new U.M;const s=n.find((e=>e.id===a));if(!s)throw new D.x3(new L.X4);try{await i.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,M.eC)(a)}]}),s?.caipNetworkId&&i.setDefaultChain(s?.caipNetworkId),e.emitter.emit("change",{chainId:Number(a)});const t=await this.getRequestedChainsIds();return this.setRequestedChainsIds([...t,a]),{...s,id:s.id}}catch(e){const n=e;if(/(?:user rejected)/iu.test(n.message))throw new D.ab(n);try{let e;e=t?.blockExplorerUrls?t.blockExplorerUrls:s.blockExplorers?.default.url?[s.blockExplorers?.default.url]:[];const n=s.rpcUrls?.chainDefault?.http||[],o={blockExplorerUrls:e,chainId:(0,M.eC)(a),chainName:s.name,iconUrls:t?.iconUrls,nativeCurrency:s.nativeCurrency,rpcUrls:n};await i.request({method:"wallet_addEthereumChain",params:[o]});const r=await this.getRequestedChainsIds();return this.setRequestedChainsIds([...r,a]),{...s,id:s.id}}catch(e){throw new D.ab(e)}}},onAccountsChanged(t){0===t.length?this.onDisconnect():e.emitter.emit("change",{accounts:t.map((e=>(0,y.K)(e)))})},onChainChanged(t){const n=Number(t);e.emitter.emit("change",{chainId:n})},onConnect(e){this.setRequestedChainsIds(n.map((e=>Number(e.id))))},async onDisconnect(t){this.setRequestedChainsIds([]),e.emitter.emit("disconnect");const n=await this.getProvider();o&&(n.removeListener("accountsChanged",o),o=void 0),r&&(n.removeListener("chainChanged",r),r=void 0),h&&(n.removeListener("disconnect",h),h=void 0),C&&(n.removeListener("session_delete",C),C=void 0),c||(c=this.onConnect.bind(this),n.on("connect",c))},onDisplayUri(t){e.emitter.emit("message",{type:"display_uri",data:t})},onSessionDelete(){this.onDisconnect()},getNamespaceChainsIds(){if(!s?.session?.namespaces)return[];const e=s?.session?.namespaces[R.bq.CHAIN.EVM]?.accounts;return e?.map((e=>Number.parseInt(e.split(":")[1]??"")))??[]},async getRequestedChainsIds(){const t=await(e.storage?.getItem(this.requestedChainsStorageKey))??[];return[...new Set(t)]},async isChainsStale(){if(!a)return!1;const t=e.chains.map((e=>e.id)),n=this.getNamespaceChainsIds();if(n.length&&!n.some((e=>t.includes(e))))return!1;const i=await this.getRequestedChainsIds();return!t.every((e=>i.includes(Number(e))))},async setRequestedChainsIds(t){await(e.storage?.setItem(this.requestedChainsStorageKey,t))},get requestedChainsStorageKey(){return`${this.id}.requestedChains`}})))}S.type="walletConnect";var W=n(49122),K=n(34129),j=n(95849),F=n(17339);var x=n(96146);const H=(0,n(77154).sj)({pendingTransactions:0}),B={state:H,subscribeKey(e,t){return(0,x.VW)(H,e,t)},increase(e){H[e]+=1},decrease(e){H[e]-=1},reset(e){H[e]=0}},V={enable:!1,pollingInterval:3e4};class J extends a.q{constructor(e){super({projectId:e.projectId,networks:k.fZ.extendCaipNetworks(e.networks,{projectId:e.projectId,customNetworkImageUrls:{},customRpcChainIds:e.transports?Object.keys(e.transports).map(Number):[]})}),this.adapterType="wagmi",this.pendingTransactionsFilter={...V,...e.pendingTransactionsFilter??{}},this.namespace=R.bq.CHAIN.EVM,this.createConfig({...e,networks:k.fZ.extendCaipNetworks(e.networks,{projectId:e.projectId,customNetworkImageUrls:{},customRpcChainIds:e.transports?Object.keys(e.transports).map(Number):[]}),projectId:e.projectId}),this.setupWatchers()}async getAccounts(e){const t=this.getWagmiConnector(e.id);if(!t)return{accounts:[]};if(t.id===R.bq.CONNECTOR_ID.AUTH){const e=t.provider,{address:n,accounts:a}=await e.connect();return Promise.resolve({accounts:(a||[{address:n,type:"eoa"}]).map((e=>i.j1.createAccount("eip155",e.address,e.type)))})}const{addresses:n,address:a}=(0,s.D)(this.wagmiConfig);return Promise.resolve({accounts:(n||[a])?.map((e=>i.j1.createAccount("eip155",e||"","eoa")))})}getWagmiConnector(e){return this.wagmiConfig.connectors.find((t=>t.id===e))}createConfig(e){this.caipNetworks=e.networks,this.wagmiChains=this.caipNetworks.filter((e=>e.chainNamespace===R.bq.CHAIN.EVM));const t=this.wagmiChains.map((e=>[e.id,k.fZ.getViemTransport(e)]));Object.entries(e.transports??{}).forEach((([e,n])=>{const a=t.findIndex((([t])=>t===Number(e)));-1===a?t.push([Number(e),n]):t[a]=[Number(e),n]}));const n=Object.fromEntries(t),a=[...e.connectors??[]];this.wagmiConfig=(0,o._)({...e,chains:this.wagmiChains,transports:n,connectors:a})}setupWatchPendingTransactions(){if(!this.pendingTransactionsFilter.enable||this.unwatchPendingTransactions)return;this.unwatchPendingTransactions=(0,r.O)(this.wagmiConfig,{pollingInterval:this.pendingTransactionsFilter.pollingInterval,onError:()=>{},onTransactions:()=>{this.emit("pendingTransactions"),B.increase("pendingTransactions")}});const e=B.subscribeKey("pendingTransactions",(t=>{t>=R.bq.LIMITS.PENDING_TRANSACTIONS&&(this.unwatchPendingTransactions?.(),e())}))}setupWatchers(){(0,c.u)(this.wagmiConfig,{onChange:(e,t)=>{"disconnected"===e.status&&this.emit("disconnect"),"connected"===e.status&&(e.address!==t?.address&&(this.setupWatchPendingTransactions(),this.emit("accountChanged",{address:e.address})),e.chainId!==t?.chainId&&this.emit("switchNetwork",{address:e.address,chainId:e.chainId}))}}),(0,d.a)(this.wagmiConfig,{onChange:e=>{0===e.length&&this.emit("disconnect")}})}addWagmiConnectors(e,t){const n=[];!1!==e.enableCoinbase&&n.push((0,W.D)({version:"4",appName:e.metadata?.name??"Unknown",appLogoUrl:e.metadata?.icons[0]??"Unknown",preference:e.coinbasePreference??"all"})),!1!==e.enableWalletConnect&&n.push(S(e,t,this.caipNetworks)),!1!==e.enableInjected&&n.push((0,C.L)({shimDisconnect:!0}));const a=void 0===e.features?.email?i.bq.DEFAULT_FEATURES.email:e.features?.email,s=e.features?.socials?e.features?.socials?.length>0:i.bq.DEFAULT_FEATURES.socials;(a||s)&&n.push(function(e){let t=[];function n(e){return R.p1.parseEvmChainId(e)||1}return(0,v.K)((a=>({id:R.bq.CONNECTOR_ID.AUTH,name:"AppKit Auth",type:"AUTH",chain:R.bq.CHAIN.EVM,async connect(e={}){const a=await this.getProvider();let i=e.chainId;if(e.isReconnecting&&(i=a.getLastUsedChainId(),!i))throw new Error("ChainId not found in provider");const{address:s,chainId:o,accounts:r}=await a.connect({chainId:i});t=r?.map((e=>e.address))||[s],await a.getSmartAccountEnabledNetworks();const c=n(o);return{accounts:t,account:s,chainId:c,chain:{id:c,unsuported:!1}}},async disconnect(){const e=await this.getProvider();await e.disconnect()},getAccounts(){return t?.length?(a.emitter.emit("change",{accounts:t}),Promise.resolve(t)):Promise.resolve([])},async getProvider(){return this.provider||(this.provider=P.D.getInstance({projectId:e.options.projectId,enableLogger:e.options.enableAuthLogger,onTimeout:()=>{i.AlertController.open(k.jD.ALERT_ERRORS.SOCIALS_TIMEOUT,"error")}})),Promise.resolve(this.provider)},async getChainId(){const e=await this.getProvider(),{chainId:t}=await e.getChainId();return n(t)},async isAuthorized(){const e=await this.getProvider();return Promise.resolve(e.getLoginEmailUsed())},async switchChain({chainId:e}){try{const n=a.chains.find((t=>t.id===e));if(!n)throw new D.x3(new Error("chain not found on connector."));const i=await this.getProvider(),s=await i.connect({chainId:e});return t=s?.accounts?.map((e=>e.address))||[s.address],a.emitter.emit("change",{chainId:Number(e),accounts:t}),n}catch(e){if(e instanceof Error)throw new D.x3(e);throw e}},onAccountsChanged(e){0===e.length?this.onDisconnect():a.emitter.emit("change",{accounts:e.map(y.K)})},onChainChanged(e){const t=Number(e);a.emitter.emit("change",{chainId:t})},async onDisconnect(e){const t=await this.getProvider();await t.disconnect()}})))}({chains:this.wagmiChains,options:{projectId:e.projectId,enableAuthLogger:e.enableAuthLogger}})),n.forEach((e=>{const t=this.wagmiConfig._internal.connectors.setup(e);this.wagmiConfig._internal.connectors.setState((e=>[...e,t]))}))}async signMessage(e){try{return{signature:await(0,h.l)(this.wagmiConfig,{message:e.message,account:e.address})}}catch(e){throw new Error("WagmiAdapter:signMessage - Sign message failed")}}async sendTransaction(e){const{chainId:t}=(0,s.D)(this.wagmiConfig),n={account:e.address,to:e.to,value:e.value,gas:e.gas,gasPrice:e.gasPrice,data:e.data,chainId:t,type:"legacy"};await(0,N.Z)(this.wagmiConfig,n);const a=await(0,g.T)(this.wagmiConfig,n);return await(0,l.e)(this.wagmiConfig,{hash:a,timeout:25e3}),{hash:a}}async writeContract(e){const{caipNetwork:t,...n}=e,a=Number(R.p1.caipNetworkIdToNumber(t.caipNetworkId));return{hash:await(0,p.n)(this.wagmiConfig,{chain:this.wagmiChains?.[a],chainId:a,address:n.tokenAddress,account:n.fromAddress,abi:n.abi,functionName:n.method,args:n.args})}}async getEnsAddress(e){const{name:t,caipNetwork:n}=e;try{if(!this.wagmiConfig)throw new Error("networkControllerClient:getApprovedCaipNetworksData - wagmiConfig is undefined");let e=!1,a=!1;return(0,R.oL)(t)&&(a=await q.sQ.resolveReownName(t)||!1),1===n.id&&(e=await(0,u.O)(this.wagmiConfig,{name:(0,F.F)(t),chainId:n.id})),{address:e||a||!1}}catch{return{address:!1}}}async estimateGas(e){try{return{gas:await(0,E.Q)(this.wagmiConfig,{account:e.address,to:e.to,data:e.data,type:"legacy"})}}catch(e){throw new Error("WagmiAdapter:estimateGas - error estimating gas")}}parseUnits(e){return(0,K.v)(e.value,e.decimals)}formatUnits(e){return(0,j.b)(e.value,e.decimals)}addWagmiConnector(e,t){e.id!==R.bq.CONNECTOR_ID.AUTH&&e.id!==R.bq.CONNECTOR_ID.WALLET_CONNECT&&this.addConnector({id:e.id,explorerId:k.CK.ConnectorExplorerIds[e.id],imageUrl:t?.connectorImages?.[e.id]??e.icon,name:k.CK.ConnectorNamesMap[e.id]??e.name,imageId:k.CK.ConnectorImageIds[e.id],type:k.CK.ConnectorTypesMap[e.type]??"EXTERNAL",info:e.id===R.bq.CONNECTOR_ID.INJECTED?void 0:{rdns:e.id},chain:this.namespace,chains:[]})}syncConnectors(e,t){this.addWagmiConnectors(e,t),this.wagmiConfig.connectors.forEach((t=>this.addWagmiConnector(t,e))),(0,f.f)(this.wagmiConfig,{onChange:t=>t.forEach((t=>this.addWagmiConnector(t,e)))})}async syncConnection(e){const{id:t}=e,n=(0,m.E)(this.wagmiConfig).find((e=>e.connector.id===t)),a=this.getWagmiConnector(t),i=await(a?.getProvider());return{chainId:Number(n?.chainId),address:n?.accounts[0],provider:i,type:n?.connector.type,id:n?.connector.id}}async connectWalletConnect(e,t){const n=this.getWagmiConnector("walletConnect");if(!n)throw new Error("UniversalAdapter:connectWalletConnect - connector not found");const a=await n.getProvider();if(!this.caipNetworks||!a)throw new Error("UniversalAdapter:connectWalletConnect - caipNetworks or provider is undefined");a.on("display_uri",(t=>{e(t)})),await(0,w.$)(this.wagmiConfig,{connector:n,chainId:t?Number(t):void 0})}async connect(e){const{id:t,provider:n,type:a,info:i,chainId:s}=e,o=this.getWagmiConnector(t);if(!o)throw new Error("connectionControllerClient:connectExternal - connector is undefined");n&&i&&o.id===R.bq.CONNECTOR_ID.EIP6963&&o.setEip6963Wallet?.({provider:n,info:i});const r=await(0,w.$)(this.wagmiConfig,{connector:o,chainId:s?Number(s):void 0});return{address:r.accounts[0],chainId:r.chainId,provider:n,type:a,id:t}}async reconnect(e){const{id:t}=e,n=this.getWagmiConnector(t);if(!n)throw new Error("connectionControllerClient:connectExternal - connector is undefined");await(0,b.G)(this.wagmiConfig,{connectors:[n]})}async getBalance(e){const t=this.caipNetworks?.find((t=>t.id===e.chainId));if(t&&this.wagmiConfig){const n=Number(e.chainId),a=await(0,I.s)(this.wagmiConfig,{address:e.address,chainId:n,token:e.tokens?.[t.caipNetworkId]?.address});return{balance:a.formatted,symbol:a.symbol}}return{balance:"",symbol:""}}async getProfile(e){const t=e.chainId,n=await(0,O.w)(this.wagmiConfig,{address:e.address,chainId:t});if(n){return{profileName:n,profileImage:await(0,T.r)(this.wagmiConfig,{name:n,chainId:t})??void 0}}return{profileName:void 0,profileImage:void 0}}getWalletConnectProvider(){return this.getWagmiConnector("walletConnect")?.provider}async disconnect(){const e=(0,m.E)(this.wagmiConfig);await Promise.all(e.map((async e=>{const t=this.getWagmiConnector(e.connector.id);t&&await(0,_.z)(this.wagmiConfig,{connector:t})})))}async switchNetwork(e){await(0,A.c)(this.wagmiConfig,{chainId:e.caipNetwork.id})}async getCapabilities(e){if(!this.wagmiConfig)throw new Error("connectionControllerClient:getCapabilities - wagmiConfig is undefined");const t=(0,m.E)(this.wagmiConfig)[0],n=t?this.getWagmiConnector(t.connector.id):null;if(!n)throw new Error("connectionControllerClient:getCapabilities - connector is undefined");const a=await n.getProvider();if(!a)throw new Error("connectionControllerClient:getCapabilities - provider is undefined");const i=a.session?.sessionProperties?.capabilities;if(i){const t=function(e){try{return JSON.parse(e)}catch(e){throw new Error("Error parsing wallet capabilities")}}(i)[e];if(t)return t}return await a.request({method:"wallet_getCapabilities",params:[e]})}async grantPermissions(e){if(!this.wagmiConfig)throw new Error("connectionControllerClient:grantPermissions - wagmiConfig is undefined");const t=(0,m.E)(this.wagmiConfig)[0],n=t?this.getWagmiConnector(t.connector.id):null;if(!n)throw new Error("connectionControllerClient:grantPermissions - connector is undefined");const a=await n.getProvider();if(!a)throw new Error("connectionControllerClient:grantPermissions - provider is undefined");return a.request({method:"wallet_grantPermissions",params:e})}async revokePermissions(e){if(!this.wagmiConfig)throw new Error("connectionControllerClient:revokePermissions - wagmiConfig is undefined");const t=(0,m.E)(this.wagmiConfig)[0],n=t?this.getWagmiConnector(t.connector.id):null;if(!n)throw new Error("connectionControllerClient:revokePermissions - connector is undefined");const a=await n.getProvider();if(!a)throw new Error("connectionControllerClient:revokePermissions - provider is undefined");return a.request({method:"wallet_revokePermissions",params:e})}}},10806:function(e,t,n){n.d(t,{XW:function(){return g}});const a="MetaMask",i="Trust Wallet",s="Solflare",o="Phantom",r="Coin98",c="Magic Eden",d="Backpack",C="Bitget Wallet",h="Frontier";var N=n(40081);N.bq.CONNECTOR_ID.COINBASE,N.bq.CONNECTOR_ID.COINBASE_SDK,N.bq.CONNECTOR_ID.SAFE,N.bq.CONNECTOR_ID.LEDGER,N.bq.CONNECTOR_ID.COINBASE,N.bq.CONNECTOR_ID.COINBASE_SDK,N.bq.CONNECTOR_ID.SAFE,N.bq.CONNECTOR_ID.LEDGER,N.bq.CONNECTOR_ID.WALLET_CONNECT,N.bq.CONNECTOR_ID.INJECTED,N.bq.CONNECTOR_ID.INJECTED,N.bq.CONNECTOR_ID.WALLET_CONNECT,N.bq.CONNECTOR_ID.COINBASE,N.bq.CONNECTOR_ID.COINBASE_SDK,N.bq.CONNECTOR_ID.LEDGER,N.bq.CONNECTOR_ID.SAFE,N.bq.CONNECTOR_ID.INJECTED,N.bq.CONNECTOR_ID.WALLET_CONNECT,N.bq.CONNECTOR_ID.EIP6963,N.bq.CONNECTOR_ID.AUTH;n(11899);n(89610),n(26584);var g;!function(e){e.Google="google",e.Github="github",e.Apple="apple",e.Facebook="facebook",e.X="x",e.Discord="discord",e.Farcaster="farcaster"}(g||(g={}))},82309:function(e,t,n){n.d(t,{fZ:function(){return g},bq:function(){return a},jD:function(){return r},gk:function(){return o},eF:function(){return d},CK:function(){return s}});const a={METMASK_CONNECTOR_NAME:"MetaMask",TRUST_CONNECTOR_NAME:"Trust Wallet",SOLFLARE_CONNECTOR_NAME:"Solflare",PHANTOM_CONNECTOR_NAME:"Phantom",COIN98_CONNECTOR_NAME:"Coin98",MAGIC_EDEN_CONNECTOR_NAME:"Magic Eden",BACKPACK_CONNECTOR_NAME:"Backpack",BITGET_CONNECTOR_NAME:"Bitget Wallet",FRONTIER_CONNECTOR_NAME:"Frontier",EIP155:"eip155",ADD_CHAIN_METHOD:"wallet_addEthereumChain",EIP6963_ANNOUNCE_EVENT:"eip6963:announceProvider",EIP6963_REQUEST_EVENT:"eip6963:requestProvider",CONNECTOR_RDNS_MAP:{coinbaseWallet:"com.coinbase.wallet",coinbaseWalletSDK:"com.coinbase.wallet"},CONNECTOR_TYPE_EXTERNAL:"EXTERNAL",CONNECTOR_TYPE_WALLET_CONNECT:"WALLET_CONNECT",CONNECTOR_TYPE_INJECTED:"INJECTED",CONNECTOR_TYPE_ANNOUNCED:"ANNOUNCED",CONNECTOR_TYPE_AUTH:"AUTH",CONNECTOR_TYPE_MULTI_CHAIN:"MULTI_CHAIN",CONNECTOR_TYPE_W3M_AUTH:"ID_AUTH"};var i=n(40081);const s={ConnectorExplorerIds:{[i.bq.CONNECTOR_ID.COINBASE]:"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",[i.bq.CONNECTOR_ID.COINBASE_SDK]:"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",[i.bq.CONNECTOR_ID.SAFE]:"225affb176778569276e484e1b92637ad061b01e13a048b35a9d280c3b58970f",[i.bq.CONNECTOR_ID.LEDGER]:"19177a98252e07ddfc9af2083ba8e07ef627cb6103467ffebb3f8f4205fd7927",[a.METMASK_CONNECTOR_NAME]:"c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96",[a.TRUST_CONNECTOR_NAME]:"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0",[a.SOLFLARE_CONNECTOR_NAME]:"1ca0bdd4747578705b1939af023d120677c64fe6ca76add81fda36e350605e79",[a.PHANTOM_CONNECTOR_NAME]:"a797aa35c0fadbfc1a53e7f675162ed5226968b44a19ee3d24385c64d1d3c393",[a.COIN98_CONNECTOR_NAME]:"2a3c89040ac3b723a1972a33a125b1db11e258a6975d3a61252cd64e6ea5ea01",[a.MAGIC_EDEN_CONNECTOR_NAME]:"8b830a2b724a9c3fbab63af6f55ed29c9dfa8a55e732dc88c80a196a2ba136c6",[a.BACKPACK_CONNECTOR_NAME]:"2bd8c14e035c2d48f184aaa168559e86b0e3433228d3c4075900a221785019b0",[a.BITGET_CONNECTOR_NAME]:"38f5d18bd8522c244bdd70cb4a68e0e718865155811c043f052fb9f1c51de662",[a.FRONTIER_CONNECTOR_NAME]:"85db431492aa2e8672e93f4ea7acf10c88b97b867b0d373107af63dc4880f041"},NetworkImageIds:{1:"ba0ba0cd-17c6-4806-ad93-f9d174f17900",42161:"3bff954d-5cb0-47a0-9a23-d20192e74600",43114:"30c46e53-e989-45fb-4549-be3bd4eb3b00",56:"93564157-2e8e-4ce7-81df-b264dbee9b00",250:"06b26297-fe0c-4733-5d6b-ffa5498aac00",10:"ab9c186a-c52f-464b-2906-ca59d760a400",137:"41d04d42-da3b-4453-8506-668cc0727900",100:"02b53f6a-e3d4-479e-1cb4-21178987d100",9001:"f926ff41-260d-4028-635e-91913fc28e00",324:"b310f07f-4ef7-49f3-7073-2a0a39685800",314:"5a73b3dd-af74-424e-cae0-0de859ee9400",4689:"34e68754-e536-40da-c153-6ef2e7188a00",1088:"3897a66d-40b9-4833-162f-a2c90531c900",1284:"161038da-44ae-4ec7-1208-0ea569454b00",1285:"f1d73bb6-5450-4e18-38f7-fb6484264a00",7777777:"845c60df-d429-4991-e687-91ae45791600",42220:"ab781bbc-ccc6-418d-d32d-789b15da1f00",8453:"7289c336-3981-4081-c5f4-efc26ac64a00",1313161554:"3ff73439-a619-4894-9262-4470c773a100",2020:"b8101fc0-9c19-4b6f-ec65-f6dfff106e00",2021:"b8101fc0-9c19-4b6f-ec65-f6dfff106e00","5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp":"a1b58899-f671-4276-6a5e-56ca5bd59700","4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z":"a1b58899-f671-4276-6a5e-56ca5bd59700",EtWTRABZaYq6iMfeYKouRu166VU2xqa1:"a1b58899-f671-4276-6a5e-56ca5bd59700","000000000019d6689c085ae165831e93":"21c895fa-e105-4829-9434-378bb54fa600"},ConnectorImageIds:{[i.bq.CONNECTOR_ID.COINBASE]:"0c2840c3-5b04-4c44-9661-fbd4b49e1800",[i.bq.CONNECTOR_ID.COINBASE_SDK]:"0c2840c3-5b04-4c44-9661-fbd4b49e1800",[i.bq.CONNECTOR_ID.SAFE]:"461db637-8616-43ce-035a-d89b8a1d5800",[i.bq.CONNECTOR_ID.LEDGER]:"54a1aa77-d202-4f8d-0fb2-5d2bb6db0300",[i.bq.CONNECTOR_ID.WALLET_CONNECT]:"ef1a1fcf-7fe8-4d69-bd6d-fda1345b4400",[i.bq.CONNECTOR_ID.INJECTED]:"07ba87ed-43aa-4adf-4540-9e6a2b9cae00"},ConnectorNamesMap:{[i.bq.CONNECTOR_ID.INJECTED]:"Browser Wallet",[i.bq.CONNECTOR_ID.WALLET_CONNECT]:"WalletConnect",[i.bq.CONNECTOR_ID.COINBASE]:"Coinbase",[i.bq.CONNECTOR_ID.COINBASE_SDK]:"Coinbase",[i.bq.CONNECTOR_ID.LEDGER]:"Ledger",[i.bq.CONNECTOR_ID.SAFE]:"Safe"},ConnectorTypesMap:{[i.bq.CONNECTOR_ID.INJECTED]:"INJECTED",[i.bq.CONNECTOR_ID.WALLET_CONNECT]:"WALLET_CONNECT",[i.bq.CONNECTOR_ID.EIP6963]:"ANNOUNCED",[i.bq.CONNECTOR_ID.AUTH]:"AUTH"},WalletConnectRpcChainIds:[1,5,11155111,10,420,42161,421613,137,80001,42220,1313161554,1313161555,56,97,43114,43113,100,8453,84531,7777777,999,324,280]},o={getCaipTokens(e){if(!e)return;const t={};return Object.entries(e).forEach((([e,n])=>{t[`${a.EIP155}:${e}`]=n})),t},isLowerCaseMatch(e,t){return e?.toLowerCase()===t?.toLowerCase()}},r={UniversalProviderErrors:{UNAUTHORIZED_DOMAIN_NOT_ALLOWED:{message:"Unauthorized: origin not allowed",alertErrorKey:"INVALID_APP_CONFIGURATION"},JWT_VALIDATION_ERROR:{message:"JWT validation error: JWT Token is not yet valid",alertErrorKey:"JWT_TOKEN_NOT_VALID"}},ALERT_ERRORS:{SWITCH_NETWORK_NOT_FOUND:{shortMessage:"Network Not Found",longMessage:"Network not found - please make sure it is included in 'networks' array in createAppKit function"},INVALID_APP_CONFIGURATION:{shortMessage:"Invalid App Configuration",longMessage:()=>`Origin ${"undefined"!=typeof window?window.origin:"unknown"} not found on Allowlist - update configuration on cloud.reown.com`},SOCIALS_TIMEOUT:{shortMessage:"Invalid App Configuration",longMessage:()=>"There was an issue loading the embedded wallet. Please verify that your domain is allowed at cloud.reown.com"},JWT_TOKEN_NOT_VALID:{shortMessage:"Session Expired",longMessage:"Invalid session found on UniversalProvider - please check your time settings and connect again"},PROJECT_ID_NOT_CONFIGURED:{shortMessage:"Project ID Not Configured",longMessage:"Project ID Not Configured - update configuration on cloud.reown.com"}}};var c=n(11899);const d={createLogger(e,t="error"){const n=(0,c.jI)({level:t}),{logger:a}=(0,c.Rt)({opts:n});return a.error=(...t)=>{for(const n of t)if(n instanceof Error)return void e(n,...t);e(void 0,...t)},a}};var C=n(89610),h=n(26584);const N=["near:mainnet","solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp","eip155:1101","eip155:56","eip155:42161","eip155:7777777","eip155:59144","eip155:324","solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1","eip155:5000","solana:4sgjmw1sunhzsxgspuhpqldx6wiyjntz","eip155:80084","eip155:5003","eip155:100","eip155:8453","eip155:42220","eip155:1313161555","eip155:17000","eip155:1","eip155:300","eip155:1313161554","eip155:1329","eip155:84532","eip155:421614","eip155:11155111","eip155:8217","eip155:43114","solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z","eip155:999999999","eip155:11155420","eip155:80002","eip155:97","eip155:43113","eip155:137","eip155:10","eip155:1301","bip122:000000000019d6689c085ae165831e93","bip122:000000000933ea01ad0ee984209779ba"],g={extendRpcUrlWithProjectId(e,t){let n=!1;try{n="rpc.walletconnect.org"===new URL(e).host}catch(e){n=!1}if(n){const n=new URL(e);return n.searchParams.has("projectId")||n.searchParams.set("projectId",t),n.toString()}return e},isCaipNetwork(e){return"chainNamespace"in e&&"caipNetworkId"in e},getChainNamespace(e){return this.isCaipNetwork(e)?e.chainNamespace:i.bq.CHAIN.EVM},getCaipNetworkId(e){return this.isCaipNetwork(e)?e.caipNetworkId:`${i.bq.CHAIN.EVM}:${e.id}`},getDefaultRpcUrl(e,t,n){const a=e.rpcUrls?.default?.http?.[0];return N.includes(t)?function(e,t){const n=new URL("https://rpc.walletconnect.org/v1/");return n.searchParams.set("chainId",e),n.searchParams.set("projectId",t),n.toString()}(t,n):a||""},extendCaipNetwork(e,{customNetworkImageUrls:t,projectId:n,customRpc:a}){const i=this.getCaipNetworkId(e),o=this.getChainNamespace(e);let r="";return r=a?e.rpcUrls.default.http?.[0]||"":this.getDefaultRpcUrl(e,i,n),{...e,chainNamespace:o,caipNetworkId:i,assets:{imageId:s.NetworkImageIds[e.id],imageUrl:t?.[e.id]},rpcUrls:{...e.rpcUrls,default:{http:[r]},chainDefault:{http:[e.rpcUrls.default.http[0]||""]}}}},extendCaipNetworks(e,{customNetworkImageUrls:t,projectId:n,customRpcChainIds:a}){return e.map((e=>g.extendCaipNetwork(e,{customNetworkImageUrls:t,projectId:n,customRpc:a?.includes(e.id)})))},getViemTransport(e){const t=e.rpcUrls.default.http?.[0];return N.includes(e.caipNetworkId)?(0,h.tv)([(0,C.d)(t,{fetchOptions:{headers:{"Content-Type":"text/plain"}}}),(0,C.d)(t)]):(0,C.d)(t)}};var l;!function(e){e.Google="google",e.Github="github",e.Apple="apple",e.Facebook="facebook",e.X="x",e.Discord="discord",e.Farcaster="farcaster"}(l||(l={}))}}]);